#labels Phase-Implementation
# Conventions à suivre pour le code PHP du projet

= Introduction =

Pour avoir un code cohérent et lisible, il faudrait respecter des conventions de codage en PHP. J'ai choisi les conventions imposées par Zend, le framework PHP le plus utilisé, parce que apparemment c'est ce qui se fait le plus couramment (vu qu'aucune convention de codage n'a l'air conseillée officiellement pour PHP).
On peut bien sûr tout changer et refaire nos propres conventions, mais autant profiter de ce qui est déjà utilisé.

= Démarcation du code PHP =

Le code PHP doit être délimité par les balises PHP complètes :
{{{
<?php

?>
}}}

= Chaînes =

Les chaînes doivent toujours être délimitées par des apostrophes (quotes simples)
{{{
$a = 'Example String';
}}}

Il est possible d'utiliser des quotes doubles lorsque la chaîne contient des apostrophes (requêtes SQL par exemple)
{{{
$sql = "SELECT `id`, `name` from `people` "
       . "WHERE `name`='Fred' OR `name`='Susan'";
}}}
Cette syntaxe est préférée à l'échapement des quotes car elle est plus lisible.

Les chaînes doivent être concaténées de la manière suivante, les espaces améliorent la lisibilité :
{{{
$company = 'Zend' . ' ' . 'Technologies';
}}}
Il est encouragé de couper la chaîner en plusieurs lignes pour améliorer la lisibilité.
{{{
$sql = "SELECT `id`, `name` FROM `people` "
     . "WHERE `name` = 'Susan' "
     . "ORDER BY `name` ASC ";
}}}

= Arrays =

Les arrays doivent être déclarés de la manière suivante, avec un espace après chaque virgule :
{{{
$sampleArray = array(1, 2, 3, 'Zend', 'Studio');
}}}
Les arrays déclarés sur plusieurs lignes doivent être alignés :
{{{
$sampleArray = array(1, 2, 3, 'Zend', 'Studio',
                     $a, $b, $c,
                     56.44, $d, 500);
}}}
Les valeurs peuvent aussi commencer à la ligne suivante. Le niveau d'indentation des valeurs est dans ce cas d'un niveau supérieur à la ligne d'au dessus. Toutes les lignes doivent avoir ensuite la même indentation et la fermeture de l'array se fait à la ligne au premier niveau d'indentation.
{{{
$sampleArray = array(
    1, 2, 3, 'Zend', 'Studio',
    $a, $b, $c,
    56.44, $d, 500,
);
}}}
Il est encouragé d'insérer une virgule après la dernière valeur, afin de ne pas l'oublier en cas de modification ultérieure.

Lors de l'utilisation d'arrays associatifs avec le constructeur array(), il est conseillé d'écrire la déclaration sur plusieurs lignes. Chaque ligne doit être complétée avec des espaces afin que les clés et les valeurs soient alignées :
{{{
$sampleArray = array('firstKey'  => 'firstValue',
                     'secondKey' => 'secondValue');
}}}

La première valeur de l'array peut également se trouver sur la ligne suivante. De la même manière que pour les chaînes, la valeur doit se trouver à un niveau d'indentation supérieure à la ligne précédente. Les lignes suivantes doivent être indentées de la même manière, la fermeture de l'array se fait sur une ligne séparée au premier niveau d'indentation. Les clés, le symbole "=>" et les valeurs doivent être alignés :
{{{
$sampleArray = array(
    'firstKey'  => 'firstValue',
    'secondKey' => 'secondValue',
);
}}}
Il est encouragé de mettre une virgule supplémentaire à la fin de la dernière ligne, pour éviter un oubli plus tard.

= Classes =

== Déclaration des classes ==

Les classes doivent être nommées suivant les conventions de Zend. L'accolade se trouve *en dessous du nom de la classe*. Chaque classe doit avoir un bloc de documentation conforme au standard PHPDocumentor.
Tout le code à l'intérieur d'une classe doit être indenté avec *4 espaces*.
Une classe seulement est permise par fichier PHP.
Placer du code supplémentaire dans les fichiers de classes est permis mais découragé. Dans ce cas, 2 lignes vides doivent séparer la classe du code additionnel.

=== Déclaration de classe acceptable : ===
{{{
/**
* Documentation Block Here
*/
class SampleClass
{
    // all contents of class
    // must be indented four spaces
}
}}}

Les classes qui héritent d'autres classes ou qui implémentent des interfaces doivent déclarer ces dépendances sur la même ligne :
{{{
class SampleClass extends FooAbstract implements BarInterface
{
}
}}}

Si la longueur de la ligne dépasse la _longueur maximale autorisée_, effectuer un retour à la ligne avant les mots "extends" ou "implements", et indenter ces lignes d'un niveau :
{{{
class SampleClass
    extends FooAbstract
    implements BarInterface
{
}
}}}

De même, si la classe implémente plusieurs interfaces et si cela aboutit à un dépassement de la taille maximale d'une ligne, retourner à la ligne après chaque virgule séparant les interfaces, et indenter les noms pour qu'ils s'alignent :
{{{
class SampleClass
    implements BarInterface,
               BazInterface
{
}
}}}

== Attributs de classe ==
Les attributs de classes doivent être nommés selon les conventions de nommage de Zend. Toute variable déclarée dans une classe doit être listée en haut de la classe, au dessous de la déclaration de toute méthode.
Le constructeur _var_ n'est pas permis. Les attributs déclarent toujours leur visibilité avec les mots-clé _private_, _protected_, ou _public_. Donner l'accès à un attribut directement en le déclarant _public_ est permis mais découragé, en faveur des méthodes d'accès get & set.

= Fonctions et méthodes =

== Déclarations ==

= Page avec les conventions complètes =

http://framework.zend.com/manual/en/coding-standard.coding-style.html
